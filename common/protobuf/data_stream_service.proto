// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

package impala;

import "common.proto";
import "row_batch.proto";

// All fields are required in V1.
message TransmitDataRequestPB {
  optional UniqueIdPB dest_fragment_instance_id = 1;

  // Id of this fragment in its role as a sender.
  optional int32 sender_id = 2;

  optional int32 dest_node_id = 3;

  optional RowBatchHeaderPB row_batch_header = 4;
}

// All fields are required in V1.
message TransmitDataResponsePB {
  optional StatusPB status = 1;
}

// All fields are required in V1.
message EndDataStreamRequestPB {
  optional UniqueIdPB dest_fragment_instance_id = 1;
  optional int32 sender_id = 2;
  optional int32 dest_node_id = 3;
}

// All fields are required in V1.
message EndDataStreamResponsePB {
  optional StatusPB status = 1;
}

// Handles data transmission between fragment instances.
service DataStreamService {
  // Called by sender to transmit single row batch. Returns error indication
  // if params.fragmentId or params.destNodeId are unknown or if data couldn't
  // be read.
  rpc TransmitData(TransmitDataRequestPB) returns (TransmitDataResponsePB);

  // Called by a sender to close the channel between fragment instances.
  rpc EndDataStream(EndDataStreamRequestPB) returns (EndDataStreamResponsePB);
}
